diff --git a/src/main.ts b/src/main.ts
index bc59eb0..f98c421 100644
--- a/src/main.ts
+++ b/src/main.ts
@@ -14,6 +14,17 @@ function ensureDirectoryExists(dirPath: string): void {
   }
 }
 
+// Add function to check if referral file exists
+function findExistingReferralFile(subDir: string, ref: string): string | null {
+  try {
+    const files = fs.readdirSync(subDir);
+    const existingFile = files.find(file => file.startsWith(`${ref}-`));
+    return existingFile ? path.join(subDir, existingFile) : null;
+  } catch (error) {
+    return null;
+  }
+}
+
 // Update the download handler
 ipcMain.on("download-referrals", async (event, refs: string[]) => {
   try {
@@ -35,14 +46,23 @@ ipcMain.on("download-referrals", async (event, refs: string[]) => {
         const subDir = path.join(outputDir, yearMonth);
         ensureDirectoryExists(subDir);
         
-        const buffer = await downloadReferral(ref, token);
-        
-        // Save file with timestamp
-        const timestamp = date.toISOString().replace(/[:.]/g, "-");
-        const filePath = path.join(subDir, `${ref}-${timestamp}.pdf`);
-        fs.writeFileSync(filePath, Buffer.from(buffer));
-        
-        results.push({ ref, success: true, filePath });
+        // Check if file already exists
+        const existingFile = findExistingReferralFile(subDir, ref);
+        if (existingFile) {
+          results.push({ 
+            ref, 
+            success: true, 
+            filePath: existingFile,
+            skipped: true 
+          });
+        } else {
+          const buffer = await downloadReferral(ref, token);
+          const timestamp = date.toISOString().replace(/[:.]/g, "-");
+          const filePath = path.join(subDir, `${ref}-${timestamp}.pdf`);
+          fs.writeFileSync(filePath, Buffer.from(buffer));
+          
+          results.push({ ref, success: true, filePath });
+        }
       } catch (error: any) {
         results.push({ 
           ref, 
@@ -63,12 +83,14 @@ ipcMain.on("download-referrals", async (event, refs: string[]) => {
     
     const successful = results.filter(r => r.success);
     const failed = results.filter(r => !r.success);
+    const skipped = results.filter(r => r.success && r.skipped);
     
     event.reply("download-complete", {
       total,
       completed,
       successful: successful.length,
       failed: failed.map(f => ({ ref: f.ref, error: f.error })),
+      skipped: skipped.length,
       outputDir
     });
   } catch (error: any) {
